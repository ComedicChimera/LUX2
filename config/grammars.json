{
  "syclone": [
    "block_declaration syclone",
    "variable_declaration ; syclone",
    "include_stmt ; syclone",
    "sub_scope syclone",
    "&"
  ],
  "main": [
    "blocks main",
    "stmt ; main",
    "sub_scope main",
    "&"
  ],
  "sub_scope": [
    "{ main }"
  ],
  "block": [
    "{ main }",
    "stmt ;"
  ],
  "blocks": [
    "block_declaration",
    "block_stmt"
  ],
  "block_declaration": [
    "module_block",
    "async_block",
    "func_block",
    "enum_block",
    "interface_block",
    "struct_block"
  ],
  "block_stmt": [
    "if_block",
    "do_block",
    "select_stmt",
    "with_block",
    "except_block",
    "for_block",
    "match_stmt"
  ],
  "module_block": [
    "MODULE module_modifiers IDENTIFIER inherit { module_main }"
  ],
  "module_modifiers": [
    "EXTERN module_modifiers",
    "STATIC module_modifiers",
    "ABSTRACT module_modifiers",
    "PARTIAL module_modifiers",
    "&"
  ],
  "inherit": [
    ": id inherit",
    "&"
  ],
  "module_main": [
    "constructor module_main",
    "block_declaration module_main",
    "member_declaration ; module_main",
    "&"
  ],
  "constructor": [
    "CONSTRUCTOR modifiers ( func_params_decl ) functional_block"
  ],
  "member_declaration": [
    "modifiers variable_declaration",
    "VOLATILE modifiers variable_declaration"
  ],
  "async_block": [
    "ASYNC modifiers IDENTIFIER ( func_params_decl ) rt_type functional_block"
  ],
  "func_block": [
    "FUNC modifiers IDENTIFIER ( func_params_decl ) rt_type functional_block"
  ],
  "rt_type": [
    "types n_rt_type",
    "&"
  ],
  "n_rt_type": [
    ", types n_rt_type",
    "&"
  ],
  "func_params_decl": [
    "func_param_prefix IDENTIFIER extension initializer n_func_params",
    "* * func_param_prefix IDENTIFIER extension",
    "&"
  ],
  "func_param_prefix": [
    "@",
    "DOLLAR",
    "AMP"
  ],
  "n_func_params": [
    ", n_func_param n_func_params",
    "&"
  ],
  "n_func_param": [
    "func_param_prefix IDENTIFIER extension initializer",
    "~ func_param_prefix IDENTIFIER extension"
  ],
  "functional_block": [
    "{ main }",
    "=> stmt ;",
    ";"
  ],
  "modifiers": [
    "EXTERN modifiers",
    "access_modifiers modifiers",
    "FINAL modifiers",
    "PROPERTY modifiers",
    "&"
  ],
  "access_modifiers": [
    "PRIVATE",
    "PROTECTED",
    "ABSTRACT",
    "SEALED"
  ],
  "enum_block": [
    "ENUM modifiers IDENTIFIER { enum_main }"
  ],
  "enum_main": [
    "IDENTIFIER initializer n_enum"
  ],
  "n_enum": [
    ", IDENTIFIER initializer n_enum",
    "&"
  ],
  "interface_block": [
    "INTERFACE modifiers IDENTIFIER { interface_main }"
  ],
  "interface_main": [
    "FUNC modifiers IDENTIFIER ( func_params_decl ) rt_type ; interface_main",
    "&"
  ],
  "struct_block": [
    "STRUCT modifiers IDENTIFIER { struct_main }"
  ],
  "struct_main": [
    "DOLLAR IDENTIFIER extension n_var"
  ],
  "n_var": [
    ", DOLLAR IDENTIFIER extension n_var",
    "&"
  ],
  "if_block": [
    "IF ( expr ) block if_follow"
  ],
  "if_follow": [
    "elif_block if_follow",
    "else_block",
    "&"
  ],
  "elif_block": [
    "ELIF ( expr ) block"
  ],
  "else_block": [
    "ELSE block"
  ],
  "do_block": [
    "DO do_body"
  ],
  "do_body": [
    "( expr ) block",
    "block do_for"
  ],
  "do_for": [
    "FOR ( expr ) ;"
  ],
  "for_block": [
    "FOR for_body"
  ],
  "for_body": [
    "for_header block",
    "base trailer => iter_body"
  ],
  "for_header": [
    "( for_expr )",
    "&"
  ],
  "for_expr": [
    "$ IDENTIFIER extension = expr ; expr ; assignment ;"
  ],
  "iter_body": [
    "sub_scope",
    "stmt ;"
  ],
  "select_stmt": [
    "SELECT ( expr ) { select_block }"
  ],
  "select_block": [
    "case select_block",
    "default select_block",
    "&"
  ],
  "case": [
    "CASE expr n_list case_block"
  ],
  "case_block": [
    ": stmt ;",
    "{ main }"
  ],
  "default": [
    "DEFAULT case_block"
  ],
  "with_block": [
    "WITH ( stmt ) block"
  ],
  "except_block": [
    "EXCEPT ( id , atom ) handle_block"
  ],
  "handle_block": [
    "{ main }",
    ";"
  ],
  "match_stmt": [
    "MATCH { match_block }"
  ],
  "match_block": [
    "? expr case_block match_block",
    "&"
  ],
  "stmt": [
    "variable_declaration",
    "throw_stmt",
    "break_stmt",
    "continue_stmt",
    "return_stmt",
    "assignment",
    "include_stmt",
    "generator_stmt",
    "external_stmt",
    "volatile_stmt",
    "value_stmt",
    "&"
  ],
  "value_stmt": [
    "VALUE ( expr ) trailer initializer"
  ],
  "volatile_stmt": [
    "VOLATILE variable_declaration"
  ],
  "external_stmt": [
    "EXTERN external_variants"
  ],
  "external_variants": [
    "variable_declaration",
    "include_stmt"
  ],
  "rename": [
    "STRING_LITERAL",
    "&"
  ],
  "break_stmt": [
    "BREAK"
  ],
  "continue_stmt": [
    "CONTINUE"
  ],
  "return_stmt": [
    "RETURN optional_expr"
  ],
  "generator_stmt": [
    "YIELD expr"
  ],
  "throw_stmt": [
    "THROW expr"
  ],
  "variable_declaration": [
    "DOLLAR var extension initializer",
    "@ var extension = expr"
  ],
  "var": [
    "( IDENTIFIER initializer multi_var )",
    "IDENTIFIER"
  ],
  "multi_var": [
    ", IDENTIFIER initializer multi_var",
    "&"
  ],
  "initializer": [
    "= expr",
    "&"
  ],
  "assignment": [
    "new await deref_op id_types trailer assignment_expr"
  ],
  "id_types": [
    "IDENTIFIER",
    "THIS"
  ],
  "assignment_expr": [
    "n_assignment assignment_op expr n_list",
    "+ +",
    "- -",
    "&"
  ],
  "n_assignment": [
    ", id_types trailer n_assignment",
    "&"
  ],
  "assignment_op": [
    "=",
    "assignment_ops"
  ],
  "include_stmt": [
    "use INCLUDE IDENTIFIER dot_id rename"
  ],
  "use": [
    "USE",
    "&"
  ],
  "expr": [
    "or n_expr"
  ],
  "n_expr": [
    "?? or n_expr",
    "ternary_operator",
    "&"
  ],
  "ternary_operator": [
    "? or : or"
  ],
  "or": [
    "xor n_or"
  ],
  "n_or": [
    "OR xor n_or",
    "&"
  ],
  "xor": [
    "and n_xor"
  ],
  "n_xor": [
    "XOR and n_xor",
    "&"
  ],
  "and": [
    "comparison n_and"
  ],
  "n_and": [
    "AND comparison n_and",
    "&"
  ],
  "comparison": [
    "not n_comparison"
  ],
  "n_comparison": [
    "comparison_op not n_comparison",
    "&"
  ],
   "comparison_op": [
    "==",
    ">=",
    "<=",
    "===",
    "!==",
    "!=",
    ">",
    "<"
  ],
  "not": [
    "! shift",
    "shift"
  ],
  "shift": [
    "arithmetic n_shift"
  ],
  "n_shift": [
    "<< arithmetic n_shift",
    ">> arithmetic n_shift",
    ">>> arithmetic n_shift",
    "&"
  ],
  "arithmetic": [
    "term add_sub_op"
  ],
  "add_sub_op": [
    "+ term add_sub_op",
    "- term add_sub_op",
    "&"
  ],
  "term": [
    "factor mul_div_mod_op"
  ],
  "mul_div_mod_op": [
    "* factor mul_div_mod_op",
    "/ factor mul_div_mod_op",
    "% factor mul_div_mod_op",
    "&"
  ],
  "factor": [
    "unary_atom exp_op"
  ],
  "exp_op": [
    "^ unary_atom exp_op",
    "&"
  ],
  "unary_atom": [
    "prefix atom",
    "atom"
  ],
  "prefix": [
    "-",
    "* deref_op",
    "AMP",
    "~"
  ],
  "deref_op": [
    "* deref_op",
    "&"
  ],
  "atom": [
    "new await base trailer",
    "( expr ) distribute trailer",
    "inline_for trailer"
  ],
  "distribute": [
    "| expr |",
    "&"
  ],
  "inline_for": [
    "FOR ( inline_for_expr )"
  ],
  "inline_for_expr": [
    "atom => expr inline_for_if"
  ],
  "inline_for_if": [
    "IF expr",
    "&"
  ],
  "new": [
    "NEW",
    "&"
  ],
  "trailer": [
    "[ subscript ] trailer",
    "( func_params ) trailer",
    ". base trailer",
    "&"
  ],
  "subscript": [
    ": expr",
    "expr slice"
  ],
  "slice": [
    ": optional_expr",
    "&"
  ],
  "optional_expr": [
    "expr",
    "&"
  ],
  "func_params": [
    "expr named_param n_param",
    "&"
  ],
  "named_param": [
    ": expr",
    "&"
  ],
  "n_param": [
    ", expr named_param n_param",
    "&"
  ],
  "base": [
    "string",
    "number",
    "IDENTIFIER",
    "THIS",
    "inline_function",
    "list",
    "array_dict",
    "NULL",
    "BOOL_LITERAL",
    "byte",
    "atom_types",
    "VALUE",
    "lambda"
  ],
  "lambda": [
    "LAMBDA ( lambda_params => expr )"
  ],
  "lambda_params": [
    "IDENTIFIER : types n_lambda_param",
    "&"
  ],
  "n_lambda_param": [
    ", IDENTIFIER : types n_lambda_param",
    "&"
  ],
  "byte": [
    "HEX_LITERAL",
    "BINARY_LITERAL"
  ],
  "atom_types": [
    "pure_types",
    "LIST_TYPE list_modifier",
    "DICT_TYPE dict_modifier",
    "ARRAY_TYPE array_modifier"
  ],
  "inline_function": [
    "FUNC ( func_params_decl ) ending",
    "ASYNC ( func_params_decl ) ending"
  ],
  "ending": [
    "( rt_type )",
    "functional_block"
  ],
  "await": [
    "AWAIT",
    "&"
  ],
  "string": [
    "STRING_LITERAL",
    "CHAR_LITERAL"
  ],
  "number": [
    "INTEGER_LITERAL",
    "FLOAT_LITERAL",
    "COMPLEX_LITERAL"
  ],
  "list": [
    "[ list_builder ]"
  ],
  "list_builder": [
    "expr n_list",
    "&"
  ],
  "n_list": [
    ", expr n_list",
    "&"
  ],
  "array_dict": [
    "{ array_dict_builder }"
  ],
  "array_dict_builder": [
    "expr array_dict_branch",
    "&"
  ],
  "array_dict_branch": [
    ": expr n_dict",
    "n_list"
  ],
  "n_dict": [
    ", expr : expr n_dict",
    "&"
  ],
  "assignment_ops": [
    "+=",
    "-=",
    "/=",
    "*=",
    "^=",
    "%=",
    "="
  ],
  "extension": [
    ": types",
    "&"
  ],
  "types": [
    "deref_op simple_types"
  ],
  "simple_types": [
    "pure_types",
    "LIST_TYPE list_modifier",
    "DICT_TYPE dict_modifier",
    "ARRAY_TYPE array_modifier",
    "FUNC func_modifier",
    "ASYNC func_modifier",
    "id"
  ],
  "func_modifier": [
    "( func_params_decl ) ( rt_type )"
  ],
  "list_modifier": [
    "[ e_types ]"
  ],
  "e_types": [
    "types",
    "&"
  ],
  "dict_modifier": [
    "[ d_types ]"
  ],
  "d_types": [
    "types , types"
  ],
  "array_modifier": [
    "[ types , expr ]"
  ],
  "id": [
    "THIS . IDENTIFIER dot_id",
    "IDENTIFIER dot_id"
  ],
  "dot_id": [
    ". IDENTIFIER dot_id",
    "&"
  ],
  "pure_types": [
    "CHAR_TYPE",
    "BOOL_TYPE",
    "INT_TYPE",
    "FLOAT_TYPE",
    "STRING_TYPE",
    "BYTE_TYPE",
    "COMPLEX_TYPE",
    "LONG_TYPE",
    "OBJECT_TYPE",
    "PACKAGE_TYPE"
  ]
}
