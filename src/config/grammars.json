{
    "main": [
    "block_stmt main",
    "stmt ; main",
    "&"
  ],
  "block": [
    "{ main }",
    ": stmt ;"
  ],
  "block_stmt": [
    "module_block",
    "constructor_block",
    "async_block",
    "func_block",
    "macro_block",
    "type_block",
    "interface_block",
    "struct_block",
    "if_block",
    "do_block",
    "for_block",
    "switch_stmt",
    "with_block"
  ],
  "module_block": [
    "MODULE modifiers module_type id inherit { module_main }"
  ],
  "module_type": [
    "ACTIVE",
    "PASSIVE",
    "AWAIT"
  ],
  "module_main": [
    "module_constructor main"
  ],
  "module_constructor": [
    "CONSTRUCTOR ( ) constructional_block"
  ],
  "constructor_block": [
    "CONSTRUCTOR modifiers IDENTIFIER dot_id ( func_params_decl ) inherit constructional_block"
  ],
  "inherit": [
    ": id inherit",
    "&"
  ],
  "constructional_block": [
    "functional_block",
    ";"
  ],
  "async_block": [
    "ASYNC modifiers rt_type id ( func_params_decl ) functional_block"
  ],
  "func_block": [
    "FUNC modifiers rt_type id ( func_params_decl ) functional_block"
  ],
  "rt_type": [
    "types",
    "id",
    "VOID"
  ],
  "func_params_decl": [
    "func_param_prefix IDENTIFIER extension params_extension n_func_params",
    "THIS n_func_params",
    "** func_param_prefix IDENTIFIER extension",
    "&"
  ],
  "params_extension": [
    "= expr",
    "&"
  ],
  "func_param_prefix": [
    "@",
    "DOLLAR",
    "AMP"
  ],
  "n_func_params": [
    ", n_func_param n_func_params",
    "&"
  ],
  "n_func_param": [
    "func_param_prefix IDENTIFIER extension params_extension",
    "** func_param_prefix IDENTIFIER extension"
  ],
  "macro_block": [
    "MACRO modifiers id ( macro_params_decl ) functional_block"
  ],
  "functional_block": [
    "{ main }",
    "=> stmt ;"
  ],
  "modifiers": [
    "VOLATILE modifiers",
    "scope_modifiers modifiers",
    "access_modifiers modifiers",
    "&"
  ],
  "scope_modifiers": [
    "LOCAL",
    "GLOBAL"
  ],
  "access_modifiers": [
    "PRIVATE",
    "PROTECTED"
  ],
  "macro_params_decl": [
    "DOLLAR IDENTIFIER extension n_var",
    "&"
  ],
  "type_block": [
    "TYPE id { type_main }"
  ],
  "type_main": [
    "IDENTIFIER n_type"
  ],
  "n_type": [
    ", IDENTIFIER n_type",
    "&"
  ],
  "interface_block": [
    "INTERFACE id { interface_main }"
  ],
  "interface_main": [
    "FUNC modifiers rt_type id ( func_params_decl ) ; interface_main",
    "&"
  ],
  "struct_block": [
    "STRUCT id { struct_main }"
  ],
  "struct_main": [
    "DOLLAR IDENTIFIER extension n_var"
  ],
  "n_var": [
    ", DOLLAR IDENTIFIER extension n_var",
    "&"
  ],
  "if_block": [
    "IF ( equation ) block if_follow"
  ],
  "if_follow": [
    "elif_block if_follow",
    "else_block",
    "&"
  ],
  "elif_block": [
    "ELIF ( equation ) block"
  ],
  "else_block": [
    "ELSE block"
  ],
  "do_block": [
    "DO do_expr block do_when"
  ],
  "do_expr": [
    "( equation )",
    "&"
  ],
  "do_when": [
    "WHEN ( equation ) ;",
    "&"
  ],
  "for_block": [
    "FOR ( DOLLAR IDENTIFIER extension for_expr ) block"
  ],
  "for_expr": [
    "for_each",
    "for_iter"
  ],
  "for_each": [
    "IN expr"
  ],
  "for_iter": [
    "for_init ; for_condition ; for_operation"
  ],
  "for_init": [
    "initializer"
  ],
  "for_condition": [
    "equation",
    "&"
  ],
  "for_operation": [
    "assignment",
    "&"
  ],
  "switch_stmt": [
    "SWITCH ( expression ) { switch_block }"
  ],
  "switch_block": [
    "block_stmt switch_block",
    "stmt ; switch_block",
    "case switch_block",
    "default switch_block",
    "&"
  ],
  "case": [
    "CASE expr block"
  ],
  "default": [
    "DEFAULT block"
  ],
  "with_block": [
    "WITH ( stmt ) block"
  ],
  "stmt": [
    "modifiers variable_decl_stmt",
    "throw_stmt",
    "del_stmt",
    "break_stmt",
    "continue_stmt",
    "return_stmt",
    "generator_stmt",
    "assignment",
    "&"
  ],
  "break_stmt": [
    "BREAK"
  ],
  "continue_stmt": [
    "CONTINUE"
  ],
  "return_stmt": [
    "RETURN expr"
  ],
  "throw_stmt": [
    "THROW expr"
  ],
  "del_stmt": [
    "DELETE atom"
  ],
  "variable_decl_stmt": [
    "DOLLAR id extension initializer",
    "AMP id extension initializer"
  ],
  "initializer": [
    "( expr ) modify_assignment",
    "= expr",
    "&"
  ],
  "modify_assignment": [
    "assignment_ops expr",
    "&"
  ],
  "assignment": [
    "id_types trailer assignment_expr"
  ],
  "id_types": [
    "IDENTIFIER",
    "THIS",
    "pure_types",
    "DICT",
    "LIST"
  ],
  "assignment_expr": [
    "core_id expr",
    "&"
  ],
  "full_assignment": [
    "atom core_id expr"
  ],
  "core_id": [
    "assignment_ops",
    "=",
    ", full_assignment ,"
  ],
  "expr": [
    "lambda",
    "comprehension",
    "generator_expr",
    "inline_generator",
    "with_expr",
    "equation"
  ],
  "lambda": [
    "LAMBDA ( lambda_expr )"
  ],
  "lambda_expr": [
    "atom => expr lambda_if"
  ],
  "lambda_if": [
    "IF equation",
    "&"
  ],
  "comprehension": [
    "[ atom ^ ( IDENTIFIER => expr ) ]"
  ],
  "inline_generator": [
    "YIELD ( VALUE extension ) inline_gen_effect"
  ],
  "inline_gen_effect": [
    "assignment_ops inline_generator_expr",
    ". atom"
  ],
  "inline_generator_expr": [
    "lambda",
    "atom"
  ],
  "generator_stmt": [
    "RETURN yield_safe_expr"
  ],
  "yield_safe_expr": [
    "object_declaration",
    "lambda",
    "comprehension",
    "YIELD inline_generator",
    "equation"
  ],
  "type_cast": [
    "pure_types ( expr )",
    "LIST ( expr )",
    "DICT ( expr )"
  ],
  "with_expr": [
    "WITH ( expr )"
  ],
  "equation": [
    "or n_equation"
  ],
  "n_equation": [
    "comparison_op or n_equation",
    "&"
  ],
  "comparison_op": [
    "==",
    ">=",
    "<=",
    "===",
    "!==",
    "!=",
    ">",
    "<",
    "IN"
  ],
  "or": [
    "xor n_or"
  ],
  "n_or": [
    "OR xor n_or",
    "&"
  ],
  "xor": [
    "and n_xor"
  ],
  "n_xor": [
    "XOR and n_xor",
    "&"
  ],
  "and": [
    "not n_and"
  ],
  "n_and": [
    "AND not n_and",
    "&"
  ],
  "not": [
    "! shift",
    "shift"
  ],
  "shift": [
    "expression n_shift"
  ],
  "n_shift": [
    "<< expression n_shift",
    ">> expression n_shift",
    "&"
  ],
  "expression": [
    "term add_sub_op",
    "bool"
  ],
  "add_sub_op": [
    "+ term add_sub_op",
    "- term add_sub_op",
    "&"
  ],
  "term": [
    "factor mul_div_mod_op"
  ],
  "mul_div_mod_op": [
    "* factor mul_div_mod_op",
    "/ factor mul_div_mod_op",
    "% factor mul_div_mod_op",
    "&"
  ],
  "factor": [
    "unary_atom exp_op"
  ],
  "exp_op": [
    "^ unary_atom exp_op",
    "&"
  ],
  "unary_atom": [
    "prefix atom",
    "atom"
  ],
  "prefix": [
    "-",
    "* deref_op",
    "@"
  ],
  "deref_op": [
    "*",
    "&"
  ],
  "atom": [
    "new base trailer",
    "( expression )"
  ],
  "new": [
    "NEW",
    "&"
  ],
  "trailer": [
    "[ equation ] trailer",
    "( func_params ) trailer",
    ". base trailer",
    "&"
  ],
  "func_params": [
    "expr named_param n_param",
    "&"
  ],
  "named_param": [
    ": expr",
    "&"
  ],
  "n_param": [
    ", expr named_param n_param",
    "&"
  ],
  "base": [
    "string",
    "number",
    "IDENTIFIER",
    "THIS",
    "inline_function",
    "list",
    "dict",
    "type_cast",
    "NULL"
  ],
  "inline_function": [
    "FUNC ( inline_params ) { }",
    "await ASYNC ( inline_params ) { }"
  ],
  "await": [
    "AWAIT",
    "&"
  ],
  "inline_params": [
    "DOLLAR IDENTIFIER << expr inline_params",
    "&"
  ],
  "string": [
    "STRING_LITERAL",
    "CHAR_LITERAL"
  ],
  "number": [
    "INTEGER_LITERAL",
    "FLOAT_LITERAL"
  ],
  "bool": [
    "BOOL_LITERAL bool_trailer"
  ],
  "bool_trailer": [
    " . base trailer",
    "&"
  ],
  "list": [
    "[ list_builder ]"
  ],
  "list_builder": [
    "expr n_list",
    "&"
  ],
  "n_list": [
    ", expr n_list",
    "&"
  ],
  "dict": [
    "{ dict_builder }"
  ],
  "dict_builder": [
    "base : expr n_dict",
    "&"
  ],
  "n_dict": [
    ", base : expr n_dict",
    "&"
  ],
  "assignment_ops": [
    "+=",
    "-=",
    "/=",
    "*=",
    "^=",
    "%=",
    "="
  ],
  "extension": [
    ": types",
    "&"
  ],
  "types": [
    "deref_op pure_types",
    "deref_op LIST_TYPE list_modifier",
    "deref_op DICT_TYPE dict_modifier",
    "deref_op id"
  ],
  "list_modifier": [
    "[ e_types ]",
    "&"
  ],
  "dict_modifier": [
    "[ d_types ]"
  ],
  "d_types": [
    "pure_types n_d_types",
    "&"
  ],
  "n_d_types": [
    ", dict_expr_types",
    "&"
  ],
  "dict_expr_types": [
    "types",
    "id"
  ],
  "e_types": [
    "types",
    "&"
  ],
  "id": [
    "THIS . IDENTIFIER dot_id",
    "IDENTIFIER dot_id"
  ],
  "dot_id": [
    ". IDENTIFIER dot_id",
    "&"
  ],
  "pure_types": [
    "CHAR_TYPE",
    "BOOL_TYPE",
    "INT_TYPE",
    "FLOAT_TYPE",
    "STRING_TYPE"
  ]
}
