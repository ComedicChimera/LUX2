{
  "main": [
    "stmt",
    "block"
  ],
  "func_main": [
    "return_stmt",
    "func_block"
  ],
  "return_stmt": [
    "func_stmt n_func_stmt"
  ],
  "func_stmt": [
    "stmt",
    "RETURN expr"
  ],
  "n_func_stmt": [
    "; func_stmt n_func_stmt",
    "&"
  ],
  "stmt": [
     "stmts ; nstmts"
   ],
  "stmts": [
    "expr",
    "var_decl",
    "pointer_decl"
  ],
  "pointer_decl": [
    "* this_id = pset_expr"
  ],
  "nstmts": [
    "stmts ; nstmts",
    "&"
  ],
  "var_decl": [
    "DOLLAR this_id extension = set_expr",
    "& this_id extension = set_expr"
  ],
  "array_inst": [
    "[ p_obj_id ]",
    "[ INTEGER_LITERAL ]",
    "&"
  ],
  "set_expr": [
    "expr",
    "lambda_expr"
  ],
  "pset_expr": [
    "pointer_math"
  ],
  "pointer_math": [
    "( p_bin_shift ) ++",
    "( p_bin_shift ) --",
    "p_bin_shift"
  ],
  "p_bin_shift": [
    "pointer sp_bin_shift"
  ],
  "sp_bin_shift":[
    "shifts pointer np_bin_shift"
  ],
  "np_bin_shift": [
    "shifts pointer np_bin_shift",
    "&"
  ],
  "shifts": [
    "<<",
    ">>"
  ],
  "pointer": [
    "@ p_obj_id"
  ],
  "p_obj_id": [
    "obj_expr . IDENTIFIER dot_id",
    "this_id",
    "func_expr"
  ],
  "extension": [
    ": types",
    "&"
  ],
  "types": [
    "INT_TYPE array_inst",
    "BOOL_TYPE array_inst",
    "STRING_TYPE array_inst",
    "FLOAT_TYPE array_inst",
    "CHAR_TYPE array_inst",
    "LIST_TYPE array_inst",
    "DICTIONARY_TYPE dict_inst"
  ],
  "dict_inst": [
    "[ types , types ]",
    "&"
  ],
  "block": [

  ],
  "func_block": [

  ],
  "expr": [
    "cond_expr",
    "obj_expr",
    "math_expr",
    "func_expr",
    "comprehension_expr"
  ],
  "lambda_expr": [
    "LAMBDA ( IDENTIFIER => expr )"
  ],
  "comprehension_expr": [
    "[ obj_id ^ ( lambda_comprehension ) ]"
  ],
  "lambda_comprehension": [
    "IDENTIFIER => expr"
  ],
  "obj_expr": [
    "NEW id ( constructor_params )"
  ],
  "constructor_params": [
    "{ named_params }"
  ],
  "named_params": [
    "IDENTIFIER : expr n_nmd_params"
  ],
  "n_nmd_params": [
    ", named_params n_nmd_params",
    "&"
  ],
  "cond_expr": [
    "xor_op OR xor_op",
    "xor_op"
  ],
  "xor_op": [
    "and_op XOR and_op",
    "and_op"
  ],
  "and_op": [
    "not_op AND not_op",
    "not_op"
  ],
  "not_op": [
    "! comp_expr",
    "comp_expr"
  ],
  "comp_expr": [
    "bool_expr == no_math_comp_expr",
    "bool_expr != no_math_comp_expr",
    "bool_expr === no_math_comp_expr",
    "bool_expr !== no_math_comp_expr",
    "math_expr == comp_expr",
    "math_expr != comp_expr",
    "math_expr === comp_expr",
    "math_expr !== comp_expr",
    "int_math_expr > comp_expr",
    "int_math_expr < comp_expr",
    "int_math_expr >= comp_expr",
    "int_math_expr <= comp_expr",
    "math_expr",
    "BOOL_LITERAL"
  ],
  "no_math_comp_expr": [
    "bool_expr == no_math_comp_expr",
    "bool_expr != no_math_comp_expr",
    "bool_expr === no_math_comp_expr",
    "bool_expr !== no_math_comp_expr",
    "math_expr == comp_expr",
    "math_expr != comp_expr",
    "math_expr === comp_expr",
    "math_expr !== comp_expr",
    "int_math_expr > comp_expr",
    "int_math_expr < comp_expr",
    "int_math_expr >= comp_expr",
    "int_math_expr <= comp_expr",
    "BOOL_LITERAL"
  ],
  "bool_expr": [
    "BOOL_LITERAL",
    "math_expr"
  ],
  "math_expr": [
    "str_math_expr",
    "int_math_expr",
    "list_math_expr"
  ],
  "str_math_expr": [
    "str_mul str_add"
  ],
  "str_add": [
    "+ str_mul_expr str_add",
    "&"
  ],
  "str_mul_expr": [
    "str_types str_mul"
  ],
  "str_mul": [
    "* str_types str_mul",
    "&"
  ],
  "str_types": [
    "CHAR_LITERAL",
    "STRING_LITERAL",
    "obj_id",
    "func_expr",
    "( str_math_exprs )"
  ],
  "list_math_expr": [
    "list_types list_add"
  ],
  "list_add": [
    "+ list_types list_add",
    "&"
  ],
  "list_types": [
    "list",
    "dict",
    "obj_id",
    "func_expr",
    "comprehension_expr",
    "( list_math_expr )"
  ],
  "int_math_expr": [
    "int_mul int_add"
  ],
  "int_add": [
    "+ int_mul int_add",
    "- int_mul int_add",
    "&"
  ],
  "int_mul": [
    "int_exp int_mul_ops"
  ],
  "int_mul_ops": [
    "* int_exp int_mul_ops",
    "/ int_expr int_mul_ops",
    "% int_expr int_mul_ops",
    "&"
  ],
  "int_exp": [
    "int_exp_ops int_types"
  ],
  "int_exp_ops": [
    "int_increm int_exp_ops ^",
    "&"
  ],
  "int_increm": [
    "int_types ++",
    "int_types --",
    "int_types **"
  ],
  "int_types": [
    "FLOAT_LITERAL",
    "INTEGER_LITERAL",
    "obj_id",
    "func_expr",
    "( int_math_expr )"
  ],
  "list": [
    "[ expr follow_list_item ]"
  ],
  "follow_list_item": [
    ", expr follow_list_item",
    "&"
  ],
  "dict": [
    "{ all_types : expr follow_dict_item }"
  ],
  "follow_dict_item": [
    ", all_types : expr follow_dict_item",
    "&"
  ],
  "all_types" : [
    "INTEGER_LITERAL",
    "FLOAT_LITERAL",
    "STRING_LITERAL",
    "CHAR_LITERAL",
    "BOOL_LITERAL"
  ],
  "obj_id": [
    "this_id",
    "obj_expr dotid"
  ],
  "id": [
    "IDENTIFIER dotid"
  ],
  "this_id": [
    "IDENTIFIER dotid",
    "THIS dotid"
  ],
  "dotid": [
    ". IDENTIFIER",
    "&"
  ],
  "func_expr": [
    "func_call",
    "inline_func"
  ],
  "func_call": [
    "obj_id ( func_params ) dot_id"
  ],
  "inline_func": [
    "FUNC ( inline_params_decl ) { func_main } dot_id"
  ],
  "inline_params_decl": [
    "inline_param, n_inline_param"
  ],
  "inline_param": [
    "DOLLAR IDENTIFIER type_ext << expr"
  ],
  "n_inline_param": [
    ", inline_param n_inline_param",
    "&"
  ],
  "func_params": [
    "m_param n_m_param"
  ],
  "m_param": [
    "expr",
    "IDENTIFIER : expr"
  ],
  "n_m_param": [
    ", m_param n_m_param",
    "&"
  ]
}
