{
  "expr": [
    "object_declaration",
    "lambda",
    "comprehension",
    "equation"
  ],
  "object_declaration": [
    "NEW id ( constructor ) trailer"
  ],
  "constructor": [
    "{ constructor_params }",
    "&"
  ],
  "constructor_params": [
    "IDENTIFIER : expr constructor_params",
    "&"
  ],
  "lambda": [
    "LAMBDA ( lambda_expr )"
  ],
  "lambda_expr": [
    "atom [ IDENTIFIER ] => expr lambda_if"
  ],
  "lambda_if": [
    "IF equation",
    "&"
  ],
  "comprehension": [
    "[ atom ^ ( IDENTIFIER => expr ) ]"
  ],
  "equation": [
    "or n_equation"
  ],
  "n_equation": [
    "comparison_op or n_equation",
    "&"
  ],
  "comparison_op": [
    "==",
    ">=",
    "<=",
    "===",
    "!==",
    "!=",
    ">",
    "<"
  ],
  "or": [
    "xor n_or"
  ],
  "n_or": [
    "OR xor n_or",
    "&"
  ],
  "xor": [
    "and n_xor"
  ],
  "n_xor": [
    "XOR and n_xor",
    "&"
  ],
  "and": [
    "not n_and"
  ],
  "n_and": [
    "AND not n_and",
    "&"
  ],
  "not": [
    "! shift",
    "shift"
  ],
  "shift": [
    "expression n_shift"
  ],
  "n_shift": [
    "<< expression n_shift",
    ">> expression n_shift",
    "&"
  ],
  "expression": [
    "term add_sub_op",
    "bool"
  ],
  "add_sub_op": [
    "+ term add_sub_op",
    "- term add_sub_op",
    "&"
  ],
  "term": [
    "factor mul_div_mod_op"
  ],
  "mul_div_mod_op": [
    "* factor mul_div_mod_op",
    "/ factor mul_div_mod_op",
    "% factor mul_div_mod_op",
    "&"
  ],
  "factor": [
    "unary_atom exp_op"
  ],
  "exp_op": [
    "^ unary_atom exp_op",
    "&"
  ],
  "unary_atom": [
    "prefix atom",
    "atom"
  ],
  "prefix": [
    "-",
    "* deref_op",
    "@"
  ],
  "deref_op": [
    "*",
    "&"
  ],
  "atom": [
    "base trailer",
    "( expression )"
  ],
  "trailer": [
    "[ equation ] trailer",
    "( func_params ) trailer",
    ". base trailer",
    "&"
  ],
  "base": [
    "string",
    "number",
    "IDENTIFIER",
    "THIS",
    "inline_function"
  ],
  "inline_function": [
    "FUNC ( inline_params ) { }",
    "await ASYNC ( inline_params ) { }"
  ],
  "await": [
    "AWAIT",
    "&"
  ],
  "inline_params": [
    "DOLLAR IDENTIFIER << expr inline_params",
    "&"
  ],
  "string": [
    "STRING_LITERAL",
    "CHAR_LITERAL"
  ],
  "number": [
    "INTEGER_LITERAL",
    "FLOAT_LITERAL"
  ],
  "bool": [
    "BOOL_LITERAL bool_trailer"
  ],
  "bool_trailer": [
    " . base trailer",
    "&"
  ],
  "list": [
    "[ list_builder ]"
  ],
  "list_builder": [
    "expr n_list",
    "&"
  ],
  "n_list": [
    ", expr n_list",
    "&"
  ],
  "dict": [
    "{ dict_builder }"
  ],
  "dict_builder": [
    "base : expr n_dict",
    "&"
  ],
  "n_dict": [
    ", base : expr n_dict",
    "&"
  ]
}
