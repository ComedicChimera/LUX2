#package test : exe;

#include math as Math;
#warn "This is a test program";

macro eprint($y : list) {
  println([y ^ (z => z + "e")]);
  print(lambda(y[z] => z + "t"));
  if(y.length > 3) {
    print(mix(y));
  }
}

//fix list types
func list mix($myList : list) {
  $rt_list : list;
  repeat(myList.length) {
    rt_list += Math.randint(0, myList.length);
  }
  return rt_list;
}

module active main {
  constructor() {
    this.name = "John";
  }

  async run() {
    print(this.name);
    this.name = mix(list(this.name))
  }

  await on("hi", func() {
    echo("Hi there!");
  });
}

builder myBuilder {
  (sq => func($vals << value) {
    Math.sqrt(vals[0], vals[1]);
    });
}

func group.myThing(this) {
  print("I am grouped function.");
}

func group2.myThing2(this) : group {
  print("I am an inherited group function.");
}

for($x in ["t", "e", "s", "t"]) {
  print(x);
  eprint(x);
}
echo("hi");
myGroup = new group();
myGroup.myThing();

anotherGroup = new group2();
anotherGroup.myThing();
anotherGroup.myThing2();
*p = @anotherGroup.name

print(*(p)++);

&y = 5;
if(y--, y == 5) {
  print("It was equal to 5!");
  when(4):
    print("Yay!");
    break;
  when(2):
    print("Welp...");
   break;
  def:
    print("What did you do?");
    break;
}
