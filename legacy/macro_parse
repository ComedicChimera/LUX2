# parses macros
def macro_parse(macro):
    # holder
    macro_var = semantics.Function()
    # set the data structure
    macro_var.data_structure = semantics.DataStructure.MACRO
    # set the *pseudo* return type
    macro_var.return_type = None
    # parsing loop
    for item in macro.content[1:]:
        # avoid tokens
        if isinstance(item, Token):
            continue
        # generate modifiers
        if item.name == "modifiers":
            macro_var.modifiers = types.unparse(item)
        # generate identifier
        elif item.name == "id":
            identifier = types.compile_identifier(item)
            macro_var.name = identifier[0]
            macro_var.group = identifier[1]
            if identifier[2]:
                throw("semantic_error", "Invalid Identifier", item.content[0])
        # parse the parameters
        elif item.name == "macro_params_decl":
            macro_var.parameters = parse_parameters(item)
            if macro_var.parameters[0].instance_marker and len(macro_var.group) == 0:
                throw("semantic_error", "Macro cannot be instance macro", macro)
            elif macro_var.parameters[0].instance_marker:
                macro_var.parameters.pop(0)
                macro_var.is_instance = True
    return macro_var
